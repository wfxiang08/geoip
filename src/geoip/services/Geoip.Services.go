// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package services

import (
	"bytes"
	"fmt"
	"github.com/wfxiang08/go_thrift/thrift"
	"github.com/wfxiang08/thrift_rpc_base/rpcthrift/services"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = services.GoUnusedProtection__

// 输入和输出的结果
//
// Attributes:
//  - CountryName
//  - CountryIsoCode
//  - CityName
//  - Lat
//  - Lng
//  - Timezone
//  - Continent
//  - ContinentCode
//  - Province
type GeoData struct {
	CountryName    string `thrift:"country_name,1" db:"country_name" json:"country_name"`
	CountryIsoCode string `thrift:"country_iso_code,2" db:"country_iso_code" json:"country_iso_code"`
	CityName       string `thrift:"city_name,3" db:"city_name" json:"city_name"`
	Lat            string `thrift:"lat,4" db:"lat" json:"lat"`
	Lng            string `thrift:"lng,5" db:"lng" json:"lng"`
	Timezone       string `thrift:"timezone,6" db:"timezone" json:"timezone"`
	Continent      string `thrift:"continent,7" db:"continent" json:"continent"`
	ContinentCode  string `thrift:"continent_code,8" db:"continent_code" json:"continent_code"`
	Province       string `thrift:"province,9" db:"province" json:"province"`
}

func NewGeoData() *GeoData {
	return &GeoData{}
}

func (p *GeoData) GetCountryName() string {
	return p.CountryName
}

func (p *GeoData) GetCountryIsoCode() string {
	return p.CountryIsoCode
}

func (p *GeoData) GetCityName() string {
	return p.CityName
}

func (p *GeoData) GetLat() string {
	return p.Lat
}

func (p *GeoData) GetLng() string {
	return p.Lng
}

func (p *GeoData) GetTimezone() string {
	return p.Timezone
}

func (p *GeoData) GetContinent() string {
	return p.Continent
}

func (p *GeoData) GetContinentCode() string {
	return p.ContinentCode
}

func (p *GeoData) GetProvince() string {
	return p.Province
}
func (p *GeoData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CountryName = v
	}
	return nil
}

func (p *GeoData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CountryIsoCode = v
	}
	return nil
}

func (p *GeoData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CityName = v
	}
	return nil
}

func (p *GeoData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Lat = v
	}
	return nil
}

func (p *GeoData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Lng = v
	}
	return nil
}

func (p *GeoData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Timezone = v
	}
	return nil
}

func (p *GeoData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Continent = v
	}
	return nil
}

func (p *GeoData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ContinentCode = v
	}
	return nil
}

func (p *GeoData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *GeoData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GeoData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:country_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.CountryName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.country_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:country_name: ", p), err)
	}
	return err
}

func (p *GeoData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country_iso_code", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:country_iso_code: ", p), err)
	}
	if err := oprot.WriteString(string(p.CountryIsoCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.country_iso_code (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:country_iso_code: ", p), err)
	}
	return err
}

func (p *GeoData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("city_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:city_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.CityName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.city_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:city_name: ", p), err)
	}
	return err
}

func (p *GeoData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lat", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lat: ", p), err)
	}
	if err := oprot.WriteString(string(p.Lat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lat (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lat: ", p), err)
	}
	return err
}

func (p *GeoData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lng", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lng: ", p), err)
	}
	if err := oprot.WriteString(string(p.Lng)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lng (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lng: ", p), err)
	}
	return err
}

func (p *GeoData) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timezone", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timezone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Timezone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timezone (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timezone: ", p), err)
	}
	return err
}

func (p *GeoData) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("continent", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:continent: ", p), err)
	}
	if err := oprot.WriteString(string(p.Continent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.continent (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:continent: ", p), err)
	}
	return err
}

func (p *GeoData) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("continent_code", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:continent_code: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContinentCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.continent_code (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:continent_code: ", p), err)
	}
	return err
}

func (p *GeoData) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("province", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:province: ", p), err)
	}
	if err := oprot.WriteString(string(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.province (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:province: ", p), err)
	}
	return err
}

func (p *GeoData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoData(%+v)", *p)
}

// Attributes:
//  - Lat
//  - Lng
type LatLng struct {
	Lat string `thrift:"lat,1" db:"lat" json:"lat"`
	Lng string `thrift:"lng,2" db:"lng" json:"lng"`
}

func NewLatLng() *LatLng {
	return &LatLng{}
}

func (p *LatLng) GetLat() string {
	return p.Lat
}

func (p *LatLng) GetLng() string {
	return p.Lng
}
func (p *LatLng) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LatLng) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Lat = v
	}
	return nil
}

func (p *LatLng) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Lng = v
	}
	return nil
}

func (p *LatLng) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LatLng"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LatLng) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lat", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lat: ", p), err)
	}
	if err := oprot.WriteString(string(p.Lat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lat (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lat: ", p), err)
	}
	return err
}

func (p *LatLng) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lng", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lng: ", p), err)
	}
	if err := oprot.WriteString(string(p.Lng)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lng (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lng: ", p), err)
	}
	return err
}

func (p *LatLng) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LatLng(%+v)", *p)
}

type GeoIpService interface {
	services.RpcServiceBase

	// Parameters:
	//  - IP
	IpToGeoData(ip string) (r *GeoData, err error)
	// Parameters:
	//  - IP
	GetLatlng(ip string) (r *LatLng, err error)
	// Parameters:
	//  - IP
	GetCityName(ip string) (r string, err error)
	// Parameters:
	//  - IP
	GetCountryName(ip string) (r string, err error)
	// Parameters:
	//  - IP
	GetCountryCode(ip string) (r string, err error)
	// Parameters:
	//  - IP
	GetProvince(ip string) (r string, err error)
}

type GeoIpServiceClient struct {
	*services.RpcServiceBaseClient
}

func NewGeoIpServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GeoIpServiceClient {
	return &GeoIpServiceClient{RpcServiceBaseClient: services.NewRpcServiceBaseClientFactory(t, f)}
}

func NewGeoIpServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GeoIpServiceClient {
	return &GeoIpServiceClient{RpcServiceBaseClient: services.NewRpcServiceBaseClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - IP
func (p *GeoIpServiceClient) IpToGeoData(ip string) (r *GeoData, err error) {
	if err = p.sendIpToGeoData(ip); err != nil {
		return
	}
	return p.recvIpToGeoData()
}

func (p *GeoIpServiceClient) sendIpToGeoData(ip string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("IpToGeoData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeoIpServiceIpToGeoDataArgs{
		IP: ip,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeoIpServiceClient) recvIpToGeoData() (value *GeoData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "IpToGeoData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "IpToGeoData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "IpToGeoData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "IpToGeoData failed: invalid message type")
		return
	}
	result := GeoIpServiceIpToGeoDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Re != nil {
		err = result.Re
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IP
func (p *GeoIpServiceClient) GetLatlng(ip string) (r *LatLng, err error) {
	if err = p.sendGetLatlng(ip); err != nil {
		return
	}
	return p.recvGetLatlng()
}

func (p *GeoIpServiceClient) sendGetLatlng(ip string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetLatlng", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeoIpServiceGetLatlngArgs{
		IP: ip,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeoIpServiceClient) recvGetLatlng() (value *LatLng, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetLatlng" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetLatlng failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetLatlng failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetLatlng failed: invalid message type")
		return
	}
	result := GeoIpServiceGetLatlngResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Re != nil {
		err = result.Re
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IP
func (p *GeoIpServiceClient) GetCityName(ip string) (r string, err error) {
	if err = p.sendGetCityName(ip); err != nil {
		return
	}
	return p.recvGetCityName()
}

func (p *GeoIpServiceClient) sendGetCityName(ip string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetCityName", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeoIpServiceGetCityNameArgs{
		IP: ip,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeoIpServiceClient) recvGetCityName() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetCityName" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetCityName failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetCityName failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetCityName failed: invalid message type")
		return
	}
	result := GeoIpServiceGetCityNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Re != nil {
		err = result.Re
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IP
func (p *GeoIpServiceClient) GetCountryName(ip string) (r string, err error) {
	if err = p.sendGetCountryName(ip); err != nil {
		return
	}
	return p.recvGetCountryName()
}

func (p *GeoIpServiceClient) sendGetCountryName(ip string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetCountryName", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeoIpServiceGetCountryNameArgs{
		IP: ip,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeoIpServiceClient) recvGetCountryName() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetCountryName" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetCountryName failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetCountryName failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetCountryName failed: invalid message type")
		return
	}
	result := GeoIpServiceGetCountryNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Re != nil {
		err = result.Re
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IP
func (p *GeoIpServiceClient) GetCountryCode(ip string) (r string, err error) {
	if err = p.sendGetCountryCode(ip); err != nil {
		return
	}
	return p.recvGetCountryCode()
}

func (p *GeoIpServiceClient) sendGetCountryCode(ip string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetCountryCode", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeoIpServiceGetCountryCodeArgs{
		IP: ip,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeoIpServiceClient) recvGetCountryCode() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetCountryCode" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetCountryCode failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetCountryCode failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetCountryCode failed: invalid message type")
		return
	}
	result := GeoIpServiceGetCountryCodeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Re != nil {
		err = result.Re
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IP
func (p *GeoIpServiceClient) GetProvince(ip string) (r string, err error) {
	if err = p.sendGetProvince(ip); err != nil {
		return
	}
	return p.recvGetProvince()
}

func (p *GeoIpServiceClient) sendGetProvince(ip string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetProvince", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeoIpServiceGetProvinceArgs{
		IP: ip,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeoIpServiceClient) recvGetProvince() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetProvince" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetProvince failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetProvince failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetProvince failed: invalid message type")
		return
	}
	result := GeoIpServiceGetProvinceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Re != nil {
		err = result.Re
		return
	}
	value = result.GetSuccess()
	return
}

type GeoIpServiceProcessor struct {
	*services.RpcServiceBaseProcessor
}

func NewGeoIpServiceProcessor(handler GeoIpService) *GeoIpServiceProcessor {
	self12 := &GeoIpServiceProcessor{services.NewRpcServiceBaseProcessor(handler)}
	self12.AddToProcessorMap("IpToGeoData", &geoIpServiceProcessorIpToGeoData{handler: handler})
	self12.AddToProcessorMap("GetLatlng", &geoIpServiceProcessorGetLatlng{handler: handler})
	self12.AddToProcessorMap("GetCityName", &geoIpServiceProcessorGetCityName{handler: handler})
	self12.AddToProcessorMap("GetCountryName", &geoIpServiceProcessorGetCountryName{handler: handler})
	self12.AddToProcessorMap("GetCountryCode", &geoIpServiceProcessorGetCountryCode{handler: handler})
	self12.AddToProcessorMap("GetProvince", &geoIpServiceProcessorGetProvince{handler: handler})
	return self12
}

type geoIpServiceProcessorIpToGeoData struct {
	handler GeoIpService
}

func (p *geoIpServiceProcessorIpToGeoData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeoIpServiceIpToGeoDataArgs{}
	if err = args.Read(iprot); err != nil {
		// 1. 数据读取错误，Connection可能存在脏数据
		iprot.ReadMessageEnd()

		// 告知Client出现问题
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IpToGeoData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()

		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeoIpServiceIpToGeoDataResult{}
	var retval *GeoData
	var err2 error
	// 2. 正常的函数调用
	if retval, err2 = p.handler.IpToGeoData(args.IP); err2 != nil {
		switch v := err2.(type) {
		// 如果是来自业务层的异常，说明rpc服务层还是OK的
		case *services.RpcException:
			// 设置异常字段
			result.Re = v
		default:
			// 其他未知类型的错误
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IpToGeoData: " + err2.Error())
			oprot.WriteMessageBegin("IpToGeoData", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		// 设置返回结果
		result.Success = retval
	}

	// 正常返回结果
	// 如何看到Process返回Error
	// 一旦出现Error, Connection就需要关闭，放弃
	// 1. Client也可能受到 TApplicationException, 或者 RpcException， 前者需要关闭Connection; 后者可以继续服用Connection
	if err2 = oprot.WriteMessageBegin("IpToGeoData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geoIpServiceProcessorGetLatlng struct {
	handler GeoIpService
}

func (p *geoIpServiceProcessorGetLatlng) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeoIpServiceGetLatlngArgs{}
	if err = args.Read(iprot); err != nil {
		// 如果数据读取错误，则直接返回err, 终止连接(数据存在问题?)
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLatlng", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeoIpServiceGetLatlngResult{}
	var retval *LatLng
	var err2 error
	// 其他异常如何处理呢?
	if retval, err2 = p.handler.GetLatlng(args.IP); err2 != nil {
		switch v := err2.(type) {
		case *services.RpcException:
			result.Re = v
		default:
			// 业务出现异常，RPC没有问题，连接保留
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLatlng: " + err2.Error())
			oprot.WriteMessageBegin("GetLatlng", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}

	// 业务层返回的Success或者Re(Exception)
	if err2 = oprot.WriteMessageBegin("GetLatlng", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}

	// 返回Result
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	// 写数据错误，则返回 (false, err)
	if err != nil {
		return
	}
	// 正常返回，没有错误
	return true, err
}

type geoIpServiceProcessorGetCityName struct {
	handler GeoIpService
}

func (p *geoIpServiceProcessorGetCityName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeoIpServiceGetCityNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCityName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeoIpServiceGetCityNameResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetCityName(args.IP); err2 != nil {
		switch v := err2.(type) {
		case *services.RpcException:
			result.Re = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCityName: " + err2.Error())
			oprot.WriteMessageBegin("GetCityName", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetCityName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geoIpServiceProcessorGetCountryName struct {
	handler GeoIpService
}

func (p *geoIpServiceProcessorGetCountryName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeoIpServiceGetCountryNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCountryName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeoIpServiceGetCountryNameResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetCountryName(args.IP); err2 != nil {
		switch v := err2.(type) {
		case *services.RpcException:
			result.Re = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCountryName: " + err2.Error())
			oprot.WriteMessageBegin("GetCountryName", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetCountryName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geoIpServiceProcessorGetCountryCode struct {
	handler GeoIpService
}

func (p *geoIpServiceProcessorGetCountryCode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeoIpServiceGetCountryCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCountryCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeoIpServiceGetCountryCodeResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetCountryCode(args.IP); err2 != nil {
		switch v := err2.(type) {
		case *services.RpcException:
			result.Re = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCountryCode: " + err2.Error())
			oprot.WriteMessageBegin("GetCountryCode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetCountryCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geoIpServiceProcessorGetProvince struct {
	handler GeoIpService
}

func (p *geoIpServiceProcessorGetProvince) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeoIpServiceGetProvinceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProvince", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeoIpServiceGetProvinceResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetProvince(args.IP); err2 != nil {
		switch v := err2.(type) {
		case *services.RpcException:
			result.Re = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProvince: " + err2.Error())
			oprot.WriteMessageBegin("GetProvince", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetProvince", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - IP
type GeoIpServiceIpToGeoDataArgs struct {
	IP string `thrift:"ip,1" db:"ip" json:"ip"`
}

func NewGeoIpServiceIpToGeoDataArgs() *GeoIpServiceIpToGeoDataArgs {
	return &GeoIpServiceIpToGeoDataArgs{}
}

func (p *GeoIpServiceIpToGeoDataArgs) GetIP() string {
	return p.IP
}
func (p *GeoIpServiceIpToGeoDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceIpToGeoDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *GeoIpServiceIpToGeoDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IpToGeoData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceIpToGeoDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *GeoIpServiceIpToGeoDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceIpToGeoDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Re
type GeoIpServiceIpToGeoDataResult struct {
	Success *GeoData               `thrift:"success,0" db:"success" json:"success,omitempty"`
	Re      *services.RpcException `thrift:"re,1" db:"re" json:"re,omitempty"`
}

func NewGeoIpServiceIpToGeoDataResult() *GeoIpServiceIpToGeoDataResult {
	return &GeoIpServiceIpToGeoDataResult{}
}

var GeoIpServiceIpToGeoDataResult_Success_DEFAULT *GeoData

func (p *GeoIpServiceIpToGeoDataResult) GetSuccess() *GeoData {
	if !p.IsSetSuccess() {
		return GeoIpServiceIpToGeoDataResult_Success_DEFAULT
	}
	return p.Success
}

var GeoIpServiceIpToGeoDataResult_Re_DEFAULT *services.RpcException

func (p *GeoIpServiceIpToGeoDataResult) GetRe() *services.RpcException {
	if !p.IsSetRe() {
		return GeoIpServiceIpToGeoDataResult_Re_DEFAULT
	}
	return p.Re
}
func (p *GeoIpServiceIpToGeoDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeoIpServiceIpToGeoDataResult) IsSetRe() bool {
	return p.Re != nil
}

func (p *GeoIpServiceIpToGeoDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceIpToGeoDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GeoData{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeoIpServiceIpToGeoDataResult) ReadField1(iprot thrift.TProtocol) error {
	p.Re = &services.RpcException{}
	if err := p.Re.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Re), err)
	}
	return nil
}

func (p *GeoIpServiceIpToGeoDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IpToGeoData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceIpToGeoDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceIpToGeoDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRe() {
		if err := oprot.WriteFieldBegin("re", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:re: ", p), err)
		}
		if err := p.Re.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Re), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:re: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceIpToGeoDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceIpToGeoDataResult(%+v)", *p)
}

// Attributes:
//  - IP
type GeoIpServiceGetLatlngArgs struct {
	IP string `thrift:"ip,1" db:"ip" json:"ip"`
}

func NewGeoIpServiceGetLatlngArgs() *GeoIpServiceGetLatlngArgs {
	return &GeoIpServiceGetLatlngArgs{}
}

func (p *GeoIpServiceGetLatlngArgs) GetIP() string {
	return p.IP
}
func (p *GeoIpServiceGetLatlngArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetLatlngArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *GeoIpServiceGetLatlngArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetLatlng_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetLatlngArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *GeoIpServiceGetLatlngArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetLatlngArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Re
type GeoIpServiceGetLatlngResult struct {
	Success *LatLng                `thrift:"success,0" db:"success" json:"success,omitempty"`
	Re      *services.RpcException `thrift:"re,1" db:"re" json:"re,omitempty"`
}

func NewGeoIpServiceGetLatlngResult() *GeoIpServiceGetLatlngResult {
	return &GeoIpServiceGetLatlngResult{}
}

var GeoIpServiceGetLatlngResult_Success_DEFAULT *LatLng

func (p *GeoIpServiceGetLatlngResult) GetSuccess() *LatLng {
	if !p.IsSetSuccess() {
		return GeoIpServiceGetLatlngResult_Success_DEFAULT
	}
	return p.Success
}

var GeoIpServiceGetLatlngResult_Re_DEFAULT *services.RpcException

func (p *GeoIpServiceGetLatlngResult) GetRe() *services.RpcException {
	if !p.IsSetRe() {
		return GeoIpServiceGetLatlngResult_Re_DEFAULT
	}
	return p.Re
}
func (p *GeoIpServiceGetLatlngResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeoIpServiceGetLatlngResult) IsSetRe() bool {
	return p.Re != nil
}

func (p *GeoIpServiceGetLatlngResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetLatlngResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LatLng{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeoIpServiceGetLatlngResult) ReadField1(iprot thrift.TProtocol) error {
	p.Re = &services.RpcException{}
	if err := p.Re.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Re), err)
	}
	return nil
}

func (p *GeoIpServiceGetLatlngResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetLatlng_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetLatlngResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetLatlngResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRe() {
		if err := oprot.WriteFieldBegin("re", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:re: ", p), err)
		}
		if err := p.Re.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Re), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:re: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetLatlngResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetLatlngResult(%+v)", *p)
}

// Attributes:
//  - IP
type GeoIpServiceGetCityNameArgs struct {
	IP string `thrift:"ip,1" db:"ip" json:"ip"`
}

func NewGeoIpServiceGetCityNameArgs() *GeoIpServiceGetCityNameArgs {
	return &GeoIpServiceGetCityNameArgs{}
}

func (p *GeoIpServiceGetCityNameArgs) GetIP() string {
	return p.IP
}
func (p *GeoIpServiceGetCityNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetCityNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *GeoIpServiceGetCityNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCityName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetCityNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *GeoIpServiceGetCityNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetCityNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Re
type GeoIpServiceGetCityNameResult struct {
	Success *string                `thrift:"success,0" db:"success" json:"success,omitempty"`
	Re      *services.RpcException `thrift:"re,1" db:"re" json:"re,omitempty"`
}

func NewGeoIpServiceGetCityNameResult() *GeoIpServiceGetCityNameResult {
	return &GeoIpServiceGetCityNameResult{}
}

var GeoIpServiceGetCityNameResult_Success_DEFAULT string

func (p *GeoIpServiceGetCityNameResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GeoIpServiceGetCityNameResult_Success_DEFAULT
	}
	return *p.Success
}

var GeoIpServiceGetCityNameResult_Re_DEFAULT *services.RpcException

func (p *GeoIpServiceGetCityNameResult) GetRe() *services.RpcException {
	if !p.IsSetRe() {
		return GeoIpServiceGetCityNameResult_Re_DEFAULT
	}
	return p.Re
}
func (p *GeoIpServiceGetCityNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeoIpServiceGetCityNameResult) IsSetRe() bool {
	return p.Re != nil
}

func (p *GeoIpServiceGetCityNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetCityNameResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GeoIpServiceGetCityNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.Re = &services.RpcException{}
	if err := p.Re.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Re), err)
	}
	return nil
}

func (p *GeoIpServiceGetCityNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCityName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetCityNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetCityNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRe() {
		if err := oprot.WriteFieldBegin("re", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:re: ", p), err)
		}
		if err := p.Re.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Re), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:re: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetCityNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetCityNameResult(%+v)", *p)
}

// Attributes:
//  - IP
type GeoIpServiceGetCountryNameArgs struct {
	IP string `thrift:"ip,1" db:"ip" json:"ip"`
}

func NewGeoIpServiceGetCountryNameArgs() *GeoIpServiceGetCountryNameArgs {
	return &GeoIpServiceGetCountryNameArgs{}
}

func (p *GeoIpServiceGetCountryNameArgs) GetIP() string {
	return p.IP
}
func (p *GeoIpServiceGetCountryNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *GeoIpServiceGetCountryNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCountryName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *GeoIpServiceGetCountryNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetCountryNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Re
type GeoIpServiceGetCountryNameResult struct {
	Success *string                `thrift:"success,0" db:"success" json:"success,omitempty"`
	Re      *services.RpcException `thrift:"re,1" db:"re" json:"re,omitempty"`
}

func NewGeoIpServiceGetCountryNameResult() *GeoIpServiceGetCountryNameResult {
	return &GeoIpServiceGetCountryNameResult{}
}

var GeoIpServiceGetCountryNameResult_Success_DEFAULT string

func (p *GeoIpServiceGetCountryNameResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GeoIpServiceGetCountryNameResult_Success_DEFAULT
	}
	return *p.Success
}

var GeoIpServiceGetCountryNameResult_Re_DEFAULT *services.RpcException

func (p *GeoIpServiceGetCountryNameResult) GetRe() *services.RpcException {
	if !p.IsSetRe() {
		return GeoIpServiceGetCountryNameResult_Re_DEFAULT
	}
	return p.Re
}
func (p *GeoIpServiceGetCountryNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeoIpServiceGetCountryNameResult) IsSetRe() bool {
	return p.Re != nil
}

func (p *GeoIpServiceGetCountryNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryNameResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GeoIpServiceGetCountryNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.Re = &services.RpcException{}
	if err := p.Re.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Re), err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCountryName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetCountryNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRe() {
		if err := oprot.WriteFieldBegin("re", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:re: ", p), err)
		}
		if err := p.Re.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Re), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:re: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetCountryNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetCountryNameResult(%+v)", *p)
}

// Attributes:
//  - IP
type GeoIpServiceGetCountryCodeArgs struct {
	IP string `thrift:"ip,1" db:"ip" json:"ip"`
}

func NewGeoIpServiceGetCountryCodeArgs() *GeoIpServiceGetCountryCodeArgs {
	return &GeoIpServiceGetCountryCodeArgs{}
}

func (p *GeoIpServiceGetCountryCodeArgs) GetIP() string {
	return p.IP
}
func (p *GeoIpServiceGetCountryCodeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *GeoIpServiceGetCountryCodeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCountryCode_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *GeoIpServiceGetCountryCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetCountryCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Re
type GeoIpServiceGetCountryCodeResult struct {
	Success *string                `thrift:"success,0" db:"success" json:"success,omitempty"`
	Re      *services.RpcException `thrift:"re,1" db:"re" json:"re,omitempty"`
}

func NewGeoIpServiceGetCountryCodeResult() *GeoIpServiceGetCountryCodeResult {
	return &GeoIpServiceGetCountryCodeResult{}
}

var GeoIpServiceGetCountryCodeResult_Success_DEFAULT string

func (p *GeoIpServiceGetCountryCodeResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GeoIpServiceGetCountryCodeResult_Success_DEFAULT
	}
	return *p.Success
}

var GeoIpServiceGetCountryCodeResult_Re_DEFAULT *services.RpcException

func (p *GeoIpServiceGetCountryCodeResult) GetRe() *services.RpcException {
	if !p.IsSetRe() {
		return GeoIpServiceGetCountryCodeResult_Re_DEFAULT
	}
	return p.Re
}
func (p *GeoIpServiceGetCountryCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeoIpServiceGetCountryCodeResult) IsSetRe() bool {
	return p.Re != nil
}

func (p *GeoIpServiceGetCountryCodeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryCodeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GeoIpServiceGetCountryCodeResult) ReadField1(iprot thrift.TProtocol) error {
	p.Re = &services.RpcException{}
	if err := p.Re.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Re), err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryCodeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCountryCode_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetCountryCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetCountryCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRe() {
		if err := oprot.WriteFieldBegin("re", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:re: ", p), err)
		}
		if err := p.Re.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Re), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:re: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetCountryCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetCountryCodeResult(%+v)", *p)
}

// Attributes:
//  - IP
type GeoIpServiceGetProvinceArgs struct {
	IP string `thrift:"ip,1" db:"ip" json:"ip"`
}

func NewGeoIpServiceGetProvinceArgs() *GeoIpServiceGetProvinceArgs {
	return &GeoIpServiceGetProvinceArgs{}
}

func (p *GeoIpServiceGetProvinceArgs) GetIP() string {
	return p.IP
}
func (p *GeoIpServiceGetProvinceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetProvinceArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *GeoIpServiceGetProvinceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProvince_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetProvinceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *GeoIpServiceGetProvinceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetProvinceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Re
type GeoIpServiceGetProvinceResult struct {
	Success *string                `thrift:"success,0" db:"success" json:"success,omitempty"`
	Re      *services.RpcException `thrift:"re,1" db:"re" json:"re,omitempty"`
}

func NewGeoIpServiceGetProvinceResult() *GeoIpServiceGetProvinceResult {
	return &GeoIpServiceGetProvinceResult{}
}

var GeoIpServiceGetProvinceResult_Success_DEFAULT string

func (p *GeoIpServiceGetProvinceResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GeoIpServiceGetProvinceResult_Success_DEFAULT
	}
	return *p.Success
}

var GeoIpServiceGetProvinceResult_Re_DEFAULT *services.RpcException

func (p *GeoIpServiceGetProvinceResult) GetRe() *services.RpcException {
	if !p.IsSetRe() {
		return GeoIpServiceGetProvinceResult_Re_DEFAULT
	}
	return p.Re
}
func (p *GeoIpServiceGetProvinceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeoIpServiceGetProvinceResult) IsSetRe() bool {
	return p.Re != nil
}

func (p *GeoIpServiceGetProvinceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeoIpServiceGetProvinceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GeoIpServiceGetProvinceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Re = &services.RpcException{}
	if err := p.Re.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Re), err)
	}
	return nil
}

func (p *GeoIpServiceGetProvinceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProvince_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeoIpServiceGetProvinceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetProvinceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRe() {
		if err := oprot.WriteFieldBegin("re", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:re: ", p), err)
		}
		if err := p.Re.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Re), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:re: ", p), err)
		}
	}
	return err
}

func (p *GeoIpServiceGetProvinceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeoIpServiceGetProvinceResult(%+v)", *p)
}
